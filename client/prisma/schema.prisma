// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String?
  role         Role          @default(CUSTOMER)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  ownedBusiness Business?    @relation("OwnerToBusiness")
  staffOf      Staff[]
  appointments Appointment[]

  @@map("users")
}

model Business {
  id        String        @id @default(uuid())
  ownerId   String        @unique @map("owner_id")
  name      String
  address   String?
  phone     String?
  logoUrl   String?       @map("logo_url")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  owner     User          @relation("OwnerToBusiness", fields: [ownerId], references: [id], onDelete: Cascade)
  staff     Staff[]
  services  Service[]
  appointments Appointment[]

  @@map("businesses")
}

model Staff {
  id          String        @id @default(uuid())
  userId      String        @map("user_id")
  businessId  String        @map("business_id")
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  business    Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  appointments Appointment[]

  @@unique([userId, businessId])
  @@map("staff")
}

model Service {
  id              String        @id @default(uuid())
  businessId      String        @map("business_id")
  name            String
  durationMinutes Int           @map("duration_minutes")
  price           Decimal       @db.Decimal(10, 2)
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  business        Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  appointments    Appointment[]

  @@map("services")
}

model Appointment {
  id         String   @id @default(uuid())
  customerId String   @map("customer_id")
  businessId String   @map("business_id")
  serviceId  String   @map("service_id")
  staffId    String   @map("staff_id")
  startTime  DateTime @map("start_time")
  endTime    DateTime @map("end_time")
  status     String   @default("CONFIRMED")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  customer User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  staff    Staff    @relation(fields: [staffId], references: [id], onDelete: Restrict)

  @@map("appointments")
}

enum Role {
  BUSINESS_OWNER
  EMPLOYEE
  CUSTOMER
}